
// Dart – типобезопасный язык, это значит, что компилятор гарантирует, что мы не сможем, например, типу int передать тип String. Но типобезопасность не гарантирует, что значение переменной может быть null.
// Эту проблему решает Null safety. Null safety усиливает систему типов, выделяя:
// 1)	Nullable types – допускают значение Null
// 2)	Non-nullable types – не допускают значение Null

// В основе Null safety лежат 3 принципа:

// 1.	Non-nullable by default -  по умолчанию типы non-nullable 
// 2.	Fully Sound - абсолютная непротиворечивость. гарантирует нам, что переменные имеющие non-nullable тип не примут Null => исключено падение на null. + оптимизация (можно исключить огромное количество проверок)
// 3.	Incrementally adoptable - поэтапная миграция

// Иерархия типов
// В Dart<2.12
// Top-тип (от него наследуются все остальные типы)- Object.
// Bottom-тип (наследуется от всех типов из Дарт, подтип всех типов, существующих в Дарт) - Null.
//   
// С Null safety ситуаци изменилась: null отделили от всех типов, он больше не подтип. Это привело к тому, что все типы теперь по умолчанию non-nullable.  
// •	Nullable тип – тип под вопросом '?'
// •	Nullable тип содержит или Null, или данные 
// •	Всегда можно передавать non-nullable данные в переменные nullable, но не наоборот
 
// Теперь (Dart>2.12) Top-типом стал Object? , а Bottom-типом Never. Тип Never используется редко и представляет отсутствие значения, используется в качестве возвращаемого типа функций, которые генерируют или возвращают ошибку.

void main() {
  int? age; // c помощью '?' - nullable
  var name; // здесь нет необходимости в ?, тк с помощью var  задается тип dynamic 
  print(age); 
  print(name);
}