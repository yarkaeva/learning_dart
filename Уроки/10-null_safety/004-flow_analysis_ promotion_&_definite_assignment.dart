// Flow Analysis: Promotion & Definite Assignment

// Обращаться к nullable объектам небезопасно, потому эти объекты мы обязаны обрабатывать на значение null.
void main() {
  print(someValue(25));
  print(someValue(null));

// такое поведение наз-ся Definite Assignment, переменной х всегда присваивается значение => дарт может быть уверен, что х не станет null, поэтому не подчеркивает отсутствие инициализации при объявлении переменной х.
  int x;
  if (25 > 0) {
    x = 1;
  } else {
    x = -1;
  }
  print(x);
}

int someValue(int? value) {
  // Мы используем if для раннего возврата, после проверки на null наш параметр value как бы 'переходит' в переменную не допускающую null, что позволяет безопасно использовать value.
  // Такое поведение называется promotion, который предоставляется механизмом анализа потока выполнения. Т.е. анализатор просматривает код, как если бы исполнял его, автоматически
  // выясняя доп.информацию.
  // НО этот способ мы можем использовать в локальных переменных в рамках какого-то метода, не подойдет для глобальных переменных
  if (value == null) {
    return 0;
    // или return valueIsNotDefined(); // через исключение
  }
  return value;
}

Never valueIsNotDefined() {
  //Тип Never представляет отсутствие значения, используется в качестве возвращаемого типа функций, которые возвращают ошибку.
  throw ArgumentError('Value is not defined');
}
